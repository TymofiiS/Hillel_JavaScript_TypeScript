/*
Adapter

????????? ???? ???????? (CurrencyAdapter), 
???? ???????? ???????? ????????? ?????? ? FinancialSystem, 
??? ?????????? ???????????? CurrencyConverter ??? ????????? ??????????? ?????.

??????? ??????? ????????????? ??????????? ???? ?????? ??????????? ????? 
? ??????? ????????? ???????.
*/


interface IConverter {
	convert(input: number): number;
	name(): string;
}

function financialSystem(converter: IConverter, input: number) {
	console.log(`Input data ${input} 
		converted by ${converter.name()} 
		to ${converter.convert(input)}`);
}


class ConverterService1 {
    convertByService(input: number): number {
        return input * 2.0;
    }

    serviceName(): string {
        return `Service converter 1`;
    }
}

class CurrencyAdapter implements IConverter {

    private _service: ConverterService1;
    constructor(service: ConverterService1) {
        this._service = service;
    }

    convert(input: number): number {
        return this._service.convertByService(5);
    }
    name(): string {
        return this._service.serviceName();
    }

}

const converterService = new ConverterService1();
const adapter = new CurrencyAdapter(converterService);

financialSystem(adapter, 5);