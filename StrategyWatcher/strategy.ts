/*
?????? "?????????"

???????? ????????? PaymentStrategy, ???? ????????? ????? pay(amount: number): void.
?????????? ?????? ??????, ??? ?????????? ??? ?????????, 
?????????, CreditCardPaymentStrategy, PaypalPaymentStrategy, BitcoinPaymentStrategy, 
????? ? ??? ??? ??????????? ????? pay.

???????? ???? PaymentContext, ???? ??? ??????????? paymentStrategy ???? PaymentStrategy.
??????? ????? executePayment(amount: number): void ? ???? PaymentContext, 
???? ???????? ????? pay ??????????? ?????????.
*/

interface IPaymentStrategy {
    pay(amount: number): void;
}

class CreditCardPaymentStrategy implements IPaymentStrategy {
    pay(amount: number): void {
        console.log(`Pay ${amount} with CreditCardPaymentStrategy`);
    }
}

class PaypalPaymentStrategy implements IPaymentStrategy {
    pay(amount: number): void {
        console.log(`Pay ${amount} with PaypalPaymentStrategy`);
    }
}

class BitcoinPaymentStrategy implements IPaymentStrategy {
    pay(amount: number): void {
        console.log(`Pay ${amount} with BitcoinPaymentStrategy`);
    }
}

class PaymentContext {
    private _paymentStrategy: IPaymentStrategy;
    constructor(paymentStrategy: IPaymentStrategy) {
        this._paymentStrategy = paymentStrategy;
    }

    public setPaymentStrategy(paymentStrategy: IPaymentStrategy) {
        this._paymentStrategy = paymentStrategy;
    }

    public executePayment(amount: number): void {
        this._paymentStrategy?.pay(amount);
    }
}

const context = new PaymentContext(new CreditCardPaymentStrategy());
context.executePayment(5);

context.setPaymentStrategy(new PaypalPaymentStrategy());
context.executePayment(10);

context.setPaymentStrategy(new BitcoinPaymentStrategy());
context.executePayment(15);